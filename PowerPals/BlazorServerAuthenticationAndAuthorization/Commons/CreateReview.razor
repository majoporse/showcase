@using BlazorServerAuthenticationAndAuthorization.models
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using powerPalsDb.Models
@inject PowerPalsServices.ReviewService ReviewService
@inject PowerPalsServices.UserService UserService

<MudPaper Style="width: 500px; max-height: 700px; border-radius: 1.5rem" Class="border-2 border-secondary mt-5">

    <header class="flex-row d-flex align-items-center justify-content-between pa-3">
        <MudButton Class="rounded-circle mr-3">
            <MudImage Src="@user.ProfilePicUrl" Alt="Profile picture" Style="width: 50px; height: 50px" Class="rounded-circle" />
        </MudButton>
        <MudRating Class="align-items-center justify-content-center" MaxValue="10" Color="Color.Secondary" SelectedValueChanged="@(num => stars = num)" />
    </header>

    <EditForm Model="@model" OnValidSubmit="Post" FormName="postform">
        <DataAnnotationsValidator />
        <MudTextField @bind-Value="model.text" Label="Create a post!" Variant="Variant.Outlined" HelperTextOnFocus="true" Class="mx-3"
                      Immediate="true" Placeholder="type here" Lines="3" HelperText="@("Max 69 characters. Current: " + model.text.Length)" For="@(() => model.text)" />

        <MudCardActions class="d-flex justify-content-between w-100 px-4 pb-4 pt-0">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">POST</MudButton>
        </MudCardActions>
    </EditForm>
</MudPaper>


@code {
    [Parameter]
    public Gym gym { get; set; } = new();

    [CascadingParameter]
    protected Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter]
    public EventCallback refresh { get; set; }

    private PostDataForm model = new();

    private User user = new();

    private int stars = 0;

    private Review review = new Review();

    public class PostDataForm
    {
        [Required]
        [StringLength(69, ErrorMessage = "Name length can't be more than 69.")]
        public string text { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
	{
		var state = await authenticationState!;

		string userId = state.User.Claims.ToList().Find(i => i.Type == ClaimTypes.NameIdentifier)!.Value;
        user = (await UserService.GetUserByIdAsync(int.Parse(userId)))!;
		review.UserId = int.Parse(userId);
		review.GymId = gym.Id;
	}

    private async void Post()
    {
        review.Content = model.text;
        review.UserId = user.Id;
        review.GymId = gym.Id;
        review.stars = stars;
        await ReviewService.AddReviewAsync(review);
        model.text = "";
        await refresh.InvokeAsync();
    }
}